
    /**
{% block phpdoc_method_header %}
     * Displays a form to edit an existing {{ entity }} entity.
     *
     * @param Request $request
     * @param {{ entity }} $entity
{% endblock phpdoc_method_header %}
     *
{% block phpdoc_method_annotations %}
{% if 'annotation' == format %}
     * @Route("/{id}/edit", name="{{ route_name_prefix }}_edit")
     * @Method({"GET", "POST"})
     * @Security("has_role('ROLE_ADMIN')")
     * @Template()
{% endif %}
{% endblock phpdoc_method_annotations %}
     *
     * @return Response
     */
{% block method_definition %}
    public function editAction(Request $request, {{ entity }} $entity)
{% endblock method_definition %}
    {
{% block method_body %}
        $acl = $this->get('bacon_acl.service.authorization');

        if (!$acl->authorize('{{ route_name_prefix }}', 'EDIT')) {
            throw $this->createAccessDeniedException();
        }

        $breadcumbs = $this->container->get('bacon_breadcrumbs');

        $breadcumbs->addItem([
            'title' => '{{ entity }}',
            'route' => '{{ route_name_prefix }}',
        ]);

        $breadcumbs->addItem([
            'title' => 'Edit',
            'route' => '',
        ]);

        $form = $this->createForm({{ entity_class }}FormType::class, $entity);
        $deleteForm = $this->createDeleteForm('{{ route_name_prefix }}_delete', $entity);
        $form->handleRequest($request);

        if ($form->isSubmitted()) {
            $handler = new {{ entity }}FormHandler(
                $form,
                $this->getDoctrine()->getManager(),
                $this->get('session')->getFlashBag()
            );

            if ($entity = $handler->save()) {
                $route = $this->get('session')->get('last-route');

                if (!$route) {
                    $route = $this->generateUrl('{{ route_name_prefix }}');
                }

                return $this->redirect($route);
            }
        }
        
        $referer = $request->headers->get('referer');
        $this->get('session')->set('last-route', $referer);

{% endblock method_body %}

{% block method_return %}
{% if 'annotation' == format %}
        return [
            'entity'      => $entity,
            'form'        => $form->createView(),
            'delete_form' => $deleteForm->createView(),
        ];
{% else %}
        return $this->render('{{ bundle }}:{{ entity|replace({'\\': '/'}) }}:edit.html.twig', [
            'entity'      => $entity,
            'form'        => $form->createView(),
            'delete_form' => $deleteForm->createView(),
        ]);
{% endif %}
{% endblock method_return %}
    }

{% block form %}
{% endblock form %}
